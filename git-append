#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import subprocess


def main(args):
    """Append args.srcfile to args.destfile."""
    bytes = 0
    for srcfile in args.srcfile:
        tmp = srcfile.read()
        bytes += len(tmp)
        if args.dryrun:
            sys.stderr.write(f"""skipping write to file "{args.dstfile.name}"\n""")
        else:
            args.dstfile.write(tmp)
            force_remove(srcfile.name)

    sys.stderr.write(f"""wrote {bytes} bytes to file "{args.dstfile.name}"\n""")


def force_remove(filename):
    """Remove the file. If the file is in github, remove it with `git rm -f`.
    if not, remove it with `rm -f`"""

    if file_in_repo(filename):
        logging.info(f"file {filename} is in the repo")
        logging.debug(f"calling: git rm -f '{filename}'")
        proc = subprocess.run(["git", "rm", "--force", filename], capture_output=True)
        logging.debug(proc)
    else:
        logging.info(f"file {filename} is NOT in the repo")
        logging.debug(f"calling: os.remove({filename})")
        os.remove(filename)


def file_in_repo(filename):
    """
    Return True if filename is tracked in git, False otherwise.
    """
    proc = subprocess.run(
        ["git", "ls-files", "--error-unmatch", filename], capture_output=True
    )
    logging.debug(proc)
    return proc.returncode == 0


def get_log_level(args):
    if args.debug:
        return logging.DEBUG
    elif args.verbose:
        return logging.INFO
    return logging.WARNING


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="git-append", description="Append and remove files in git"
    )
    parser.add_argument("-d", "--debug", action="store_true", default=False)
    parser.add_argument("-v", "--verbose", action="store_true", default=False)
    parser.add_argument(
        "--dry-run",
        "-n",
        action=argparse.BooleanOptionalAction,
        dest="dryrun",
        default=False,
        help="A 'dry-run' makes no file changes",
    )
    parser.add_argument(
        "srcfile",
        nargs="+",
        type=argparse.FileType("r"),
        help="Source file to be appended to dstfile and removed",
    )
    parser.add_argument(
        "dstfile",
        type=argparse.FileType("a"),
        help="Destination file to be extended with source contents",
    )
    args = parser.parse_args()
    logging.basicConfig(format='>>> %(message)s',level=get_log_level(args))
    main(args)
